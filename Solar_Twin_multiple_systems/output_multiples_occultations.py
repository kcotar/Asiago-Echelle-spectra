from astropy.table import Table, join
import numpy as np
import astropy.coordinates as coord
import astropy.units as un
from astropy.time import Time, TimeDelta
from astroplan import Observer
import matplotlib.pyplot as plt

# update IERS Bulletin A table
# from astroplan import download_IERS_A
# download_IERS_A()

data_dir = '/shared/ebla/cotar/'
asiago_data_dir = data_dir + 'Asiago_reduced_data/TRIPLE/'

a_data = Table.read(asiago_data_dir + 'TRIPLE_reduced.fits')
c_data = Table.read(data_dir+'GALAH_iDR3_v1_181221_cannon.fits')
# g_data = Table.read(data_dir+'sobject_iraf_53_gaia.fits')['sobject_id','source_id','phot_g_mean_mag','phot_bp_mean_mag','phot_rp_mean_mag']
c_data['abs_g_mean_mag'] = c_data['phot_g_mean_mag'] - 2.5*np.log10(((c_data['r_est'])/10.)**2)
print c_data.colnames

# c_data = join(c_data, g_data, keys='sobject_id', join_type='left')

# all investigated as possible multiple star - 7% best match
list_objects = [140314004401277,140413004401324,140607001401278,140711002901268,140805003101303,140805003601343,140806002301027,140807004501336,140807005001072,140811004501343,140814003301261,150330002601242,150330002601306,150408004101169,150408005301116,150408005301259,150409005601390,150411004101331,150427004301273,150602002701341,150703005101329,150705005401364,150706005901329,150828003701040,150828004701312,150830005101021,150830005101144,150830005101180,151111002101059,151111002101116,151230003201107,151230003201396,160325004701385,160326002101077,160327006101355,160328004201051,160330002101179,160330002601095,160330102801144,160331004301386,160401004401123,160401004401168,160402006101178,160403003601392,160420005301119,160424004201264,160425003101385,160524004201306,160525002201033,160531001601046,160531005101256,160811002901141,160813002101314,160816004201351,160817003101363,160916002301334,161006003901387,161006004401018,161007002801208,161008002501018,161104003301091,161116002801375,161116003301345,161118004701364,161211003101098,161212002601031,161217002601138,161217004101075,161219005101228,170108002201086,170108004601305,170115001601273,170117003101267,170131003101076,170205003401309,170404001601387,170408004501048,170408005501159,170414005101383,170416004801356,170418002701078,170506002901026,170508004801312,170514002401099,170514003001180,170515003101035,170515003601030,170517001801023,170601003601121,170603003101048,170614004601061,170710002701354,170711004501329,170711005101185,170712004201047,170713004601335,170713005101388,170801002801082,170801004601371,170805003601381,170829001901315,170905003101295,170909002601291,171001001601037,171102003301124,171102004501327,171106002401374,171227001601269]
# all investigated as possible multiple star - 10% best match
# list_objects = [140312004001104,140313003601286,140314004401277,140413004401324,140607001401278,140609001101365,140708001201126,140708007101032,140708007101065,140711002401316,140711002901268,140711003901095,140711003901263,140711003901301,140711004401321,140805003101303,140805003601343,140806001701153,140806002301027,140807004501336,140807005001072,140807005001180,140807005001277,140808002701338,140809003101041,140809004201328,140811004501343,150105002801352,150207003101166,150208002701108,150330002601242,150330002601306,150405002401021,150405002401022,150408004101169,150408005301116,150408005301259,150409002601317,150409005601390,150411003101361,150411004101331,150412006101393,150427004301273,150427004801068,150602002701341,150602003301072,150603002301031,150606005901289,150606005901339,150703005101329,150703005601046,150705005401026,150705005401364,150705005401387,150706005901329,150827004601258,150828003701040,150828004201224,150828004701312,150828005201119,150829003101331,150830005101021,150830005101144,150830005101180,150830006101099,150901001901111,150903002401225,151111002101059,151111002101116,151111002101170,151230003201107,151230003201122,151230003201396,151231002601098,160107001601073,160112002901151,160130004101385,160130005201082,160325004701351,160325004701385,160326002101077,160327006101355,160328004201051,160328004201167,160330002101179,160330002601095,160330102801144,160331004301386,160401003401358,160401004401123,160401004401168,160402005101147,160402006101178,160403003601392,160415003101177,160415003601170,160415003601341,160420004301043,160420005301119,160420005801305,160424004201264,160425001901089,160425003101385,160426004501395,160426005001295,160426006101272,160519002101233,160522004601011,160523004001343,160524004201018,160524004201306,160525002201033,160529001801311,160531001601046,160531005101256,160723002601386,160811002901141,160812003101017,160813002101314,160816003201361,160816003701062,160816004201351,160817003101139,160817003101363,160916001801111,160916002301334,160916002801338,160919003001097,160919003001290,160919004601338,160923002501223,160923005201313,161006003901230,161006003901387,161006004401018,161007002801208,161007002801397,161008002501018,161008003001222,161008003001313,161009002601361,161104003301091,161116002801375,161116003301345,161117003001257,161118002601176,161118004701362,161118004701364,161211003101098,161212002101397,161212002601031,161217002601138,161217004101075,161219005101228,161228002501030,170102001901154,170107004201142,170108002201086,170108003301305,170108004601305,170111001601329,170112002101294,170114004101329,170115001601273,170117003101267,170118003301037,170121002801292,170122003101390,170131003101076,170205003401309,170205004901019,170205004901178,170404001601387,170407002601374,170407004101131,170408004501048,170408005501159,170412002401082,170413005101289,170413005601346,170414003101035,170414003101043,170414003101103,170414004101027,170414004101039,170414005101383,170416004801356,170418002701078,170506002901026,170507011701038,170508004801312,170509007701112,170510004301099,170511002101344,170511003301067,170513004901208,170514002401099,170514003001119,170514003001180,170515003101035,170515003601030,170516003601053,170517001801023,170517004501333,170601003601121,170602004201323,170603003101048,170614004601055,170614004601061,170710002701354,170711002001385,170711004501329,170711005101185,170712003601210,170712004201047,170713004601335,170713005101388,170713005601077,170724004101366,170801002801082,170801002801345,170801004601047,170801004601371,170805003601381,170806004701033,170829001901315,170905003101014,170905003101295,170905003101357,170906004601362,170907004601162,170909002601291,170909003801129,170910002601283,170910004101188,170910005601335,170911004701386,170912002401118,170912002901277,171001001601037,171001001601097,171001001901317,171001001901374,171001002401308,171101001201087,171101001201245,171102003301124,171102004501327,171106002401374,171207004001027,171208002101108,171208002101139,171227001601269,171227003601347,180102003601157]


print 'N objects:', len(list_objects)

st_data = c_data[np.in1d(c_data['sobject_id'], list_objects)]

# asiago filter
st_data = st_data[st_data['dec'] > -40]

out_data = st_data['sobject_id','ra','dec','phot_g_mean_mag','abs_g_mean_mag']
star_coords = coord.ICRS(ra=st_data['ra']*un.deg, dec=st_data['dec']*un.deg)

# print st_data['sobject_id','ra','dec']
# print out_data

# assiago coordinate
site = 'Mt. Ekar 182 cm. Telescope'
ekar_site = Observer.at_site(site, timezone="UTC")
ekar_location = coord.EarthLocation.of_site(site)

# requested timespan and timestep
t1 = Time('2019-01-01 00:00:00')
t2 = Time('2022-01-01 00:00:00')

# plot moon motion and investigated stars
dt = TimeDelta(180. * 60., format='sec')  # minutes to seconds conversion
n_dt = int((t2-t1)/dt)
moon_loc = []
for i_dt in range(n_dt):
    if i_dt % 100 == 0:
        print 100.*i_dt/n_dt, '%'
    curr_time = t1 + i_dt*dt
    moon_coord = coord.get_moon(curr_time, location=ekar_location)
    moon_loc.append([moon_coord.ra.value, moon_coord.dec.value])
moon_loc = np.array(moon_loc)
# plot them all
plt.scatter(c_data['ra'], c_data['dec'], lw=0, s=0.5, c='0.25', label='GALAH')
plt.scatter(moon_loc[:, 0], moon_loc[:, 1], lw=0, s=2, c='black', label='Moon center')
plt.scatter(st_data['ra'], st_data['dec'], lw=0, s=2, c='red', label='Multiple candidates')
plt.xlim(0, 360)
plt.ylim(-50, 50)
plt.xlabel('RA')
plt.ylabel('DEC')
plt.legend()
plt.tight_layout()
plt.savefig('moon_path_2019_2020.png', dpi=350)
# plt.show()
plt.close()
# raise SystemExit

dt = TimeDelta(2. * 60., format='sec')  # minutes to seconds conversion
n_dt = int((t2-t1)/dt)
out_file = 'occultations_table_Solar_multiples_7_2019_2020.txt'
txt_file = open(out_file, 'w')
txt_file.close()
radius_moon = 15.*un.arcmin
# get position of the Moon on every timestamp
for i_dt in range(n_dt):
    if i_dt % 100 == 0:
        print 100.*i_dt/n_dt, '%'
    curr_time = t1 + i_dt*dt
    moon_coord = coord.get_moon(curr_time, location=ekar_location)
    moon_coord2 = coord.ICRS(ra=moon_coord.ra.value * un.deg, dec=moon_coord.dec.value * un.deg)
    sep_values = star_coords.separation(moon_coord2)
    # print np.min(sep_values), np.max(sep_values)
    idx_occulted = sep_values <= radius_moon
    if np.sum(idx_occulted) > 0:
        print i_dt, np.sum(idx_occulted)
        sobjects = st_data['sobject_id'][idx_occulted]
        txt_file = open(out_file, 'a')
        txt_file.write(str(curr_time)+'\n')
        txt_file.write(','.join([str(sobj) for sobj in sobjects])+'\n')
        txt_file.write('\n\n')
        txt_file.close()
